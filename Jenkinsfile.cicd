pipeline {
  agent any

  environment {
    AWS_REGION     = 'us-east-1'
    IMAGE_TAG      = "${env.BUILD_NUMBER}"
    ECR_REPO       = 'weather-service'
    ECR_REGISTRY   = '061039805700.dkr.ecr.us-east-1.amazonaws.com'
    ECR_IMAGE_URL  = "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
    ACCOUNT_ID     = '061039805700'

    TF_ECR_SSM_DIR = 'terraform/ecr_ssm'
    TF_INFRA_DIR   = 'terraform/infra'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Unit Tests') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew clean test --tests com.weather_service.testsuites.UnitSuite'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
        failure {
          echo '‚ùå Unit tests failed. Check the test report for details.'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          try {
            sh 'docker version'
            sh "docker build -t ${ECR_IMAGE_URL} ."
          } catch (err) {
            echo '‚ùå Docker build failed.'
            echo "Error: ${err.getMessage()}"
            error("Stopping pipeline due to Docker build failure.")
          }
        }
      }
    }

    stage('Provision ECR + SSM') {
      steps {
        dir("${TF_ECR_SSM_DIR}") {
          withCredentials([
            string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
            string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
            string(credentialsId: 'weather-private-key', variable: 'PRIVATE_KEY'),
            string(credentialsId: 'weather-public-key', variable: 'PUBLIC_KEY'),
            string(credentialsId: 'weather-token-expiration', variable: 'TOKEN_EXPIRATION'),
            string(credentialsId: 'weather-admin-password', variable: 'ADMIN_PASSWORD'),
            string(credentialsId: 'owm-api-key', variable: 'OWM_KEY'),
            string(credentialsId: 'owm-api-url', variable: 'OWM_URL')
          ]) {
            script {
              // Write parameters to a temporary tfvars JSON file for safety
              def tfvarsFile = 'ssm-vars.auto.tfvars.json'
              writeFile file: tfvarsFile, text: """
              {
                "aws_region": "${AWS_REGION}",
                "ecr_repo_name": "${ECR_REPO}",
                "parameters": {
                  "security.private-key": "${PRIVATE_KEY}",
                  "security.public-key": "${PUBLIC_KEY}",
                  "security.token-expiration": "${TOKEN_EXPIRATION}",
                  "security.admin-password": "${ADMIN_PASSWORD}",
                  "openweathermap.api.key": "${OWM_KEY}",
                  "openweathermap.api.url": "${OWM_URL}"
                }
              }
              """.stripIndent()

              // Run Terraform
              sh """
                terraform init -input=false
                terraform apply -auto-approve
              """
            }
          }
        }
      }
    }

    stage('Push Docker Image to ECR') {
      steps {
        withCredentials([
          string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
          string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
        ]) {
          sh '''
            set -e
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

            echo "üîê Logging into ECR..."
            aws ecr get-login-password --region ${AWS_REGION} | \
              docker login --username AWS --password-stdin ${ECR_REGISTRY}

            echo "üè∑Ô∏è Tagging Docker image with 'latest'..."
            docker tag ${ECR_IMAGE_URL} ${ECR_REGISTRY}/${ECR_REPO}:latest

            echo "üì¶ Pushing both image tags..."
            docker push ${ECR_IMAGE_URL}
            docker push ${ECR_REGISTRY}/${ECR_REPO}:latest
          '''
        }
      }
    }

    stage('Provision EC2 Infra') {
      steps {
        dir("${TF_INFRA_DIR}") {
          withCredentials([
            string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
            string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
          ]) {
            sh """
              set -e
              terraform init -input=false
              terraform validate
              terraform apply -auto-approve \
                -var='aws_region=${AWS_REGION}' \
                -var='account_id=${ACCOUNT_ID}' \
                -var='image_tag=latest}' \
                -var='instance_type=t2.micro'
            """
          }
        }
      }
      post {
        failure {
          echo "üö® EC2 Infra provisioning failed. Check Terraform output."
        }
      }
    }

  }
}
