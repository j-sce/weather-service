pipeline {
  agent any

  environment {
    AWS_REGION     = 'us-east-1'
    ECR_REPO       = 'weather-service'
    ACCOUNT_ID     = '061039805700'

    TF_ECR_SSM_DIR = 'terraform/ecr_ssm'
    TF_INFRA_DIR   = 'terraform/infra'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Destroy ECR + SSM') {
      steps {
        dir("${TF_ECR_SSM_DIR}") {
          withCredentials([
            string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
            string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
            string(credentialsId: 'weather-private-key', variable: 'PRIVATE_KEY'),
            string(credentialsId: 'weather-public-key', variable: 'PUBLIC_KEY'),
            string(credentialsId: 'weather-token-expiration', variable: 'TOKEN_EXPIRATION'),
            string(credentialsId: 'weather-admin-password', variable: 'ADMIN_PASSWORD'),
            string(credentialsId: 'owm-api-key', variable: 'OWM_KEY'),
            string(credentialsId: 'owm-api-url', variable: 'OWM_URL')
          ]) {
            script {
              def tfvarsFile = 'ssm-vars.auto.tfvars.json'
              writeFile file: tfvarsFile, text: """
              {
                "aws_region": "${AWS_REGION}",
                "ecr_repo_name": "${ECR_REPO}",
                "parameters": {
                  "security.private-key": "${PRIVATE_KEY}",
                  "security.public-key": "${PUBLIC_KEY}",
                  "security.token-expiration": "${TOKEN_EXPIRATION}",
                  "security.admin-password": "${ADMIN_PASSWORD}",
                  "openweathermap.api.key": "${OWM_KEY}",
                  "openweathermap.api.url": "${OWM_URL}"
                }
              }
              """.stripIndent()

              sh """
                terraform init -input=false
                terraform destroy -auto-approve
              """
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo '✅ ECR and SSM parameters successfully destroyed.'
    }
    failure {
      echo '❌ Failed to destroy ECR or SSM resources.'
    }
  }
}
